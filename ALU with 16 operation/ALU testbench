`timescale 1ns / 1ps

module ALU_tb;

// Inputs
reg [15:0] A;
reg [15:0] B;
reg [3:0] SEL;

// Output
wire [31:0] Y;

// Instantiate the ALU module
ALU uut (
    .A(A), 
    .B(B), 
    .SEL(SEL), 
    .Y(Y)
);

initial begin
    // Test Addition
    A = 16'h0005;
    B = 16'h0003;
    SEL = 4'b0000; // Addition operation
    #10;  // Wait for 10 time units
    $display("Addition: Y = %h", Y);

    // Test Subtraction
    A = 16'h0005;
    B = 16'h0003;
    SEL = 4'b0001; // Subtraction operation
    #10;
    $display("Subtraction: Y = %h", Y);

    // Test AND
    A = 16'h00FF;
    B = 16'h0F0F;
    SEL = 4'b0010; // AND operation
    #10;
    $display("AND: Y = %h", Y);

    // Test OR
    A = 16'h00FF;
    B = 16'h0F0F;
    SEL = 4'b0011; // OR operation
    #10;
    $display("OR: Y = %h", Y);

    // Test XOR
    A = 16'h00FF;
    B = 16'h0F0F;
    SEL = 4'b0100; // XOR operation
    #10;
    $display("XOR: Y = %h", Y);

    // Test NOT
    A = 16'h00FF;
    SEL = 4'b0101; // NOT operation
    #10;
    $display("NOT: Y = %h", Y);

    // Test Increment
    A = 16'h00FF;
    SEL = 4'b0110; // Increment operation
    #10;
    $display("Increment: Y = %h", Y);

    // Test Decrement
    A = 16'h0100;
    SEL = 4'b0111; // Decrement operation
    #10;
    $display("Decrement: Y = %h", Y);

    // Test Shift Left
    A = 16'h0001;
    SEL = 4'b1000; // Shift Left operation
    #10;
    $display("Shift Left: Y = %h", Y);

    // Test Shift Right
    A = 16'h0002;
    SEL = 4'b1001; // Shift Right operation
    #10;
    $display("Shift Right: Y = %h", Y);

    // Test Multiplication
    A = 16'h0003;
    B = 16'h0004;
    SEL = 4'b1010; // Multiplication operation
    #10;
    $display("Multiplication: Y = %h", Y);

    // Test Division
    A = 16'h0008;
    B = 16'h0002;
    SEL = 4'b1011; // Division operation
    #10;
    $display("Division: Y = %h", Y);

    // Test Logical Shift Left (circular)
    A = 16'h000F;
    B = 16'h0002;
    SEL = 4'b1100; // Logical Shift Left (circular) operation
    #10;
    $display("Logical Shift Left: Y = %h", Y);

    // Test Logical Shift Right (circular)
    A = 16'hF000;
    B = 16'h0002;
    SEL = 4'b1101; // Logical Shift Right (circular) operation
    #10;
    $display("Logical Shift Right: Y = %h", Y);

    // Test NOR
    A = 16'h00FF;
    B = 16'h0F0F;
    SEL = 4'b1110; // NOR operation
    #10;
    $display("NOR: Y = %h", Y);

    // Test NAND
    A = 16'h00FF;
    B = 16'h0F0F;
    SEL = 4'b1111; // NAND operation
    #10;
    $display("NAND: Y = %h", Y);

    $stop; // Stop the simulation
end

endmodule
