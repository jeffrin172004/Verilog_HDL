`timescale 1ns / 1ps


module soc_adder(
  input clk,rst,sel,wen,
  input [19:0] addr,
  input [31:0] wr_data,
  output reg [31:0] rd_data);
  
  reg [31:0] reg1;
  reg [31:0] reg2;
  reg [31:0] reg3;
  reg [31:0] reg4;
  reg [31:0] reg5;
  
  wire [9:0] w_sum;
  
  parameter ADDR_REG1 = 20'd0, ADDR_REG2 = 20'd4, ADDR_REG3 = 20'd8, ADDR_REG4 = 20'd12,ADDR_REG5=20'd16;
  
  always @(posedge clk)
    begin
      if(rst)
        begin
          reg1 <= 0;
          reg2 <= 0;
          reg3 <= 0;
          reg4 <= 0;
          reg5 <= 0;
        end  
      else
        begin
          if(sel & wen)
            begin
              case(addr)
                ADDR_REG1: reg1 <= wr_data;
                ADDR_REG2: reg2 <= wr_data;
                ADDR_REG3: reg3 <= wr_data;
                ADDR_REG4: reg4 <= wr_data;
                default: begin  reg1 <= wr_data; end
              endcase
            end
        end
    end
 
  
    always @(posedge clk)
    begin
      if(rst)
        begin
          rd_data <= 0;
        end  
      else
        begin
          if(sel & (~wen))
            begin
              case(addr)
                ADDR_REG1: rd_data <= reg1;
                ADDR_REG2: rd_data <= reg2;
                ADDR_REG3: rd_data <= reg3;
                ADDR_REG4: rd_data <= reg4;
                ADDR_REG5: rd_data <= w_sum;
                default: begin  rd_data <= reg1; end
              endcase
            end
        end
    end
  
 my_adder A(.a(reg1[7:0]),.b(reg2[7:0]),.c(reg3[7:0]),.d(reg4[7:0]),.sum(w_sum));


endmodule
